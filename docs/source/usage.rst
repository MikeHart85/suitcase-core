*****
Usage
*****

Basic Export
============

#. Install the suitcase for the format you want. For example, CSV.

   .. code-block:: bash

   pip install suitcase-csv

#. Access you data in Python. For example, retrieve it from the databroker.

   .. code-block:: python

   from databroker import Broker
   db = Broker.named('my_beamline')
   docs = db[-1].documents(fill=True)

#. Use the :func:`export` function in the suitcase.

   .. code-block:: python

      suitcase.csv.export(docs, '')

   This will generate one or more files in the current directory. You may also
   specify a different directory like so:
   
   .. code-block:: python

      suitcase.csv.export(docs, 'path/to/usb_stick')

   The number of files generated depends on the format and also the specifics
   of the data being exported.  For example, suitcase-csv generates one CSV
   file for each logical table ("stream") in the data, which varies.
   
   By default the file names are derived from the run's unique ID, which is
   guaranteed to be *unique* but not very descriptive --- names like
   ``e687d1b6-af34-4f8f-9f0d-2ebe1e1edcb7-primary.csv`` and
   ``e687d1b6-af34-4f8f-9f0d-2ebe1e1edcb7-baseline.csv``. To tailor the name to
   your needs, you can specify a file prefix:

   .. code-block:: python

      suitcase.csv.export(docs, 'path/to/files', 'my-data-')

   which would lead to names like ``my-data-primary.csv`` and
   ``my-data-baseline.csv`` in this case.

   You can also *template* the file prefix with metadata (extracted from the
   RunStart document). Examples:

   .. code-block:: python

      export(gen, 'path/to/files', '{plan_name}-{motors}-')
      export(gen, 'path/to/files', '{time:%%Y-%%m-%%d_%%H:%%M}-') # timestamp
      export(gen, 'path/to/files', '{sample_name}')

   The last example assumes that a ``sample_name`` metadata was included when
   the data was acquired.

Available Formats
=================

We classify suitcases into three categories.

Generics
--------

These export into commonly-requested formats.

Available:

* suitcase-csv --- scalar data as Common-Separated Values
* suitcase-tiff --- image data TIFF stacks or individual TIFF files
* suitcase-json-metadata --- JSON with just experiment metadata ("header")

There is often room for interpretation in how exactly to lay out the data into
a given file format. If a generic suitcase does not meet your needs, we
encourage you to write (or request) a one-off.

"One-offs"
----------

These are tailored to one specific application, writing files to the
requirements of a particular software program or user.

In Progress:

* suitcase-specfile --- text files traditionally generated by SPEC
* suitcase-nexus-archive --- a variety of the NeXuS HDF5 layout

Planned:

* suitcase-data-exchange --- (`DataExchange from APS <https://www.aps.anl.gov/Science/Scientific-Software/DataExchange>`_)
* suitcase-xafs-data-interchange --- XAFS Data Interchange (doi:10.1088/1742-6596/712/1/012148)


Backends
--------

These encode the data into a format intended to be accessed through a
programmatic interface such as databroker. They are not intended to be read by
humans or necessarily parseable by external software. Rather, they are for
internal archival.

Available:

* suitcase-jsonl (`Newline-delimited JSON <http://jsonlines.org>`_)
* suitcase-mongo

Planned:

* suitcase-bson
* suitcase-cbor

Streaming Export
----------------

In addition to the ``export``, each suitcase package implements a
``Serializer`` class. This is for the slightly more advanced:q


Serialize to Any Buffer
-----------------------


